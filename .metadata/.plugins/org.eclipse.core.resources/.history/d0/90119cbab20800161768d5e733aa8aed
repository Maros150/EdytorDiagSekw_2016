package edytor.property;








public class EdytorClassSection {
	  extends GFPropertySection implements ITabbedPropertyConstants {
			
			Text nameText;
			List containerList;
			List processList;

		   @Override
		   public void createControls(Composite parent,TabbedPropertySheetPage tabbedPropertySheetPage) {
		        super.createControls(parent, tabbedPropertySheetPage);
		   	 
		        TabbedPropertySheetWidgetFactory factory = getWidgetFactory();
		        Composite composite = factory.createFlatFormComposite(parent);
		        FormData data;

		        //Name
		        nameText = factory.createText(composite, "");
		        data = new FormData();
		        data.left = new FormAttachment(0, STANDARD_LABEL_WIDTH);
		        data.right = new FormAttachment(100, 0);
		        data.top = new FormAttachment(0, VSPACE);
		        nameText.setLayoutData(data);
		        
		        ModifyListener textname = addNameModifylistener();
		        nameText.addModifyListener(textname);
		        
		        
		        CLabel nameLabel = factory.createCLabel(composite,  "Name:");
		        data = new FormData();
		        data.left = new FormAttachment(0, 0);
		        data.right = new FormAttachment(nameText, -HSPACE);
		        data.top = new FormAttachment(nameText, 0, SWT.CENTER);
		        nameLabel.setLayoutData(data);
		        
		        //Originates
		        containerList = factory.createList(composite, VSPACE | SWT.BORDER);
		    	
		    	data = new FormData();
		        data.left = new FormAttachment(0, STANDARD_LABEL_WIDTH);
		        data.right = new FormAttachment(100, 0);
		        data.top = new FormAttachment(nameText,0, VSPACE);
		        
		        containerList.setLayoutData(data);
		        
		        CLabel containerListLabel = factory.createCLabel(composite,  "Container:");
		        data = new FormData();
		        data.left = new FormAttachment(0, 0);
		        data.right = new FormAttachment(containerList, -HSPACE);
		        data.top = new FormAttachment(containerList, 0, SWT.CENTER);
		        containerListLabel.setLayoutData(data);
		        
		        
		        //References
		        processList = factory.createList(composite, VSPACE | SWT.BORDER);
		    	
		    	data = new FormData();
		        data.left = new FormAttachment(0, STANDARD_LABEL_WIDTH);
		        data.right = new FormAttachment(100, 0);
		        data.top = new FormAttachment(containerList,0, VSPACE);
		        
		        processList.setLayoutData(data);        

		        
		        CLabel processListLabel = factory.createCLabel(composite,  "Process:");
		        data = new FormData();
		        data.left = new FormAttachment(0, 0);
		        data.right = new FormAttachment(processList, -HSPACE);
		        data.top = new FormAttachment(processList, 0, SWT.CENTER);
		        processListLabel.setLayoutData(data);        
		        
		   }
		   
		   
		    @Override
		    public void refresh() {
		    	PictogramElement pe = getSelectedPictogramElement();
		        if (pe != null) {
		            Object bo = Graphiti.getLinkService().getBusinessObjectForLinkedPictogramElement(pe);
		            // the filter assured, that it is a EClass
		            if (bo == null)
		                return;
		            if(bo instanceof Layer){
		            	
		            	//name
			            nameText.setText(((Layer) bo).getName());
			            
			            //container
			            containerList.removeAll();
			            for(Container temp:((Layer)bo).getHasContainer()){
			            	containerList.add(temp.getName());
			            }
			            
			            //processe
			            processList.removeAll();
			            for(Process temp:((Layer)bo).getHasProcess()){
			            	processList.add(temp.getName());
			            }
		            }  
		         }	
		    }
		    
		    
		    
		    private ModifyListener addNameModifylistener() {
		    	return new ModifyListener() {

		        	@Override
		        	public void modifyText(ModifyEvent e) {
		        		String value = nameText.getText();
		        		if (value == null) {
		        			value = "";//$NON-NLS-1$
		        		}
		        		PictogramElement pe = getSelectedPictogramElement();
		        		if (pe != null) {
		        			Object bo = Graphiti.getLinkService().getBusinessObjectForLinkedPictogramElement(pe);
		        			// the filter assured, that it is a EClass
		        			if (bo == null)
		        				return;
		        			String name = ((Layer) bo).getName();
		        			if (value.equals(name))
		        				return;
		        		}
		        		final String typedValue = value;
		        		IFeature feature = new AbstractFeature(getDiagramTypeProvider().getFeatureProvider()) {
		        				
		        			@Override
		        			public void execute(IContext context) {
		        				PictogramElement pe = getSelectedPictogramElement();
		        				if (pe != null) {
		        					Object bo = Graphiti.getLinkService().getBusinessObjectForLinkedPictogramElement(pe);
		        					// the filter assured, that it is a EClass
		        					if (bo == null)
		        						return;
		        					Layer eClass = (Layer) bo;
		        					eClass.setName(typedValue);
		        				}
		        			}
		        			
		        			@Override
		        			public boolean canExecute(IContext context) {
		        				return true;
		        			}
		        		};
		        		CustomContext context = new CustomContext();
		        		execute(feature, context);
		        	}
		        };
		    }    
}
