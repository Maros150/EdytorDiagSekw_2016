package edytor.features;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.graphiti.features.IDirectEditingInfo;
import org.eclipse.graphiti.features.context.IAddContext;
import org.eclipse.graphiti.features.context.ICreateContext;
import org.eclipse.graphiti.mm.algorithms.Image;
import org.eclipse.graphiti.mm.algorithms.Text;
import org.eclipse.graphiti.mm.algorithms.styles.Orientation;
import org.eclipse.graphiti.mm.pictograms.ContainerShape;
import org.eclipse.graphiti.mm.pictograms.Diagram;
import org.eclipse.graphiti.mm.pictograms.PictogramElement;
import org.eclipse.graphiti.mm.pictograms.Shape;
import org.eclipse.graphiti.pattern.AbstractPattern;
import org.eclipse.graphiti.pattern.IPattern;
import org.eclipse.graphiti.services.Graphiti;
import org.eclipse.graphiti.services.IGaService;
import org.eclipse.graphiti.services.IPeCreateService;

import edytor.diagram.EditorImageProvider;
import edytorModel.EdytorModelFactory;



public class ClassPattern extends AbstractPattern implements IPattern{

	
	
	@Override
	public String getCreateName() {
		// TODO:
		return "Class";
	}
	
	@Override
	public boolean isMainBusinessObjectApplicable(Object mainBusinessObject) {
		return mainBusinessObject instanceof edytorModel.Class;
	}

	@Override
	protected boolean isPatternControlled(PictogramElement pictogramElement) {
		Object domainObject = getBusinessObjectForPictogramElement(pictogramElement);
		return isMainBusinessObjectApplicable(domainObject);
	}

	@Override
	protected boolean isPatternRoot(PictogramElement pictogramElement) {
		Object domainObject = getBusinessObjectForPictogramElement(pictogramElement);
		return isMainBusinessObjectApplicable(domainObject);
	}

	
	
	
	
	@Override
	public boolean canCreate(ICreateContext context) {
		return context.getTargetContainer() instanceof Diagram;
	}
	

	// TODO:
/*	@Override
	public String getCreateImageId() {
		// TODO:
		return EditorImageProvider.IMG_MINICONTAINER;
	};*/
	
	
	
	@Override
	public Object[] create(ICreateContext context) {
		// TODO:
		Object newTyp = EdytorModelFactory.eINSTANCE.createClass();
		
		getDiagram().eResource().getContents().add((EObject) newTyp);

		addGraphicalRepresentation(context, newTyp);
		return new Object[] { newTyp };
	}
	
	@Override
	public boolean canAdd(IAddContext context) {
		// TODO:
		return  context.getNewObject() instanceof edytorModel.Class &&  context.getTargetContainer() instanceof Diagram;
	}
	
	@Override
	public PictogramElement add(IAddContext context) {
		Diagram targetDiagram = (Diagram) context.getTargetContainer();
		// TODO:
		SourceSystemContainer addedClass = (SourceSystemContainer) context.getNewObject();
		addedClass.setName(createNewName());
		
		// CONTAINER SHAPE WITH IMAGE
        IPeCreateService peCreateService = Graphiti.getPeCreateService();
        ContainerShape containerShape =
             peCreateService.createContainerShape(targetDiagram, true);
 

        IGaService gaService = Graphiti.getGaService();
        Image image;
        {
        	image = gaService.createImage(containerShape, EditorImageProvider.IMG_CONTAINER);
        	image.setStretchH(true);
        	image.setStretchV(true);
        	gaService.setLocationAndSize(image, context.getX(),context.getY() ,IMG_WIDTH , IMG_HIGHT); 
            
            if (addedClass.eResource() == null) {
                getDiagram().eResource().getContents().add(addedClass);
            }
            //create link and wire it
            link(containerShape, addedClass);
        }
 
        // SHAPE WITH TEXT
        {
            // create shape for text
            Shape shape = peCreateService.createShape(containerShape, false);
     
            // create and set text graphics algorithm
            Text text = gaService.createText(shape, addedClass.getName());
            text.setForeground(manageColor(TEXT_FOREGROUND));
            text.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER ); 
            // vertical alignment has as default value "center"
            text.setFont(gaService.manageDefaultFont(getDiagram(), false, true));
            gaService.setLocationAndSize(text, 0, 0, IMG_WIDTH, TEXT_HIGHT);
            // create link and wire it
            link(shape, addedClass);
            
            
            // create shape for Container type name
            shape = peCreateService.createShape(containerShape, false);
     
            // create and set text graphics algorithm
            text = gaService.createText(shape, TEXT_CONTAINER_TYPE);
            text.setForeground(manageColor(TEXT_FOREGROUND));
            text.setHorizontalAlignment(Orientation.ALIGNMENT_CENTER ); 
            // vertical alignment has as default value "center"
            text.setFont(gaService.manageDefaultFont(getDiagram(), false, true));
            gaService.setLocationAndSize(text, 0, 0, IMG_WIDTH, IMG_HIGHT);
            // create link and wire it
            link(shape, addedClass);
            
            
  
            IDirectEditingInfo directEditingInfo = getFeatureProvider().getDirectEditingInfo();
            directEditingInfo.setMainPictogramElement(containerShape);
            directEditingInfo.setPictogramElement(shape);
            directEditingInfo.setGraphicsAlgorithm(text);
        }

        // add a chopbox anchor to the shape 
        peCreateService.createChopboxAnchor(containerShape);
        // call the layout feature
        layoutPictogramElement(containerShape);
        return containerShape;
	}
	
	
	
	@Override
	public boolean canLayout(ILayoutContext context) {
		return context.getPictogramElement() instanceof ContainerShape  && getBusinessObjectForPictogramElement(context.getPictogramElement()) instanceof Container ;
	}
	
	@Override
	public boolean layout(ILayoutContext context) {
		PictogramElement pictogramElement = context.getPictogramElement();
		if (pictogramElement instanceof ContainerShape) {
			ContainerShape containerShape = (ContainerShape) pictogramElement;
			GraphicsAlgorithm outerGraphicsAlgorithm = containerShape.getGraphicsAlgorithm();
			if (outerGraphicsAlgorithm instanceof Image) {
				Image roundedRectangle = (Image) outerGraphicsAlgorithm;
				EList<Shape> children = containerShape.getChildren();
				if (children.size() > 0) {
					Shape name = children.get(0);
					Shape type = children.get(1);
					GraphicsAlgorithm nameGraphicsAlgorithm = name.getGraphicsAlgorithm();
					GraphicsAlgorithm typeGraphicsAlgorithm = type.getGraphicsAlgorithm();
					if (nameGraphicsAlgorithm instanceof Text && typeGraphicsAlgorithm instanceof Text) {
						Graphiti.getGaLayoutService().setLocationAndSize(nameGraphicsAlgorithm, 0, 0, roundedRectangle.getWidth(), TEXT_HIGHT);
						Graphiti.getGaLayoutService().setLocationAndSize(typeGraphicsAlgorithm, 0, 0, roundedRectangle.getWidth(), IMG_HIGHT);
						return true;
					}
				}
			}
		}
		return false;
	}
	
	@Override
	public void preDelete(org.eclipse.graphiti.features.context.IDeleteContext context) {
        PictogramElement pictogramElement = context.getPictogramElement();
        Object object = getBusinessObjectForPictogramElement(pictogramElement);
        
		EList<EObject> contents = getDiagram().eResource().getContents();
		for (EObject container : contents) {
			if (container instanceof Process) {
				if(((Process) container).getInput()==object){
					((Process) container).setInput(null);
				}
				if(((Process) container).getOutput()==object){
					((Process) container).setOutput(null);
				}
			}
			else if(container instanceof Layer){
				if(((Layer) container).getHasContainer().contains(object)){
					((Layer) container).getHasContainer().remove(object);
				}
			}
		}
	}
	@Override
	public IReason updateNeeded(IUpdateContext context) {
	        // retrieve name from pictogram model
	        String pictogramName = null;
	        PictogramElement pictogramElement = context.getPictogramElement();
	        if (pictogramElement  instanceof ContainerShape) {
	            ContainerShape cs = (ContainerShape) pictogramElement;
	            	Shape shape = cs.getChildren().get(0);
	                if (shape != null && shape.getGraphicsAlgorithm() instanceof Text) {
	                    Text text = (Text) shape.getGraphicsAlgorithm();
	                    pictogramName = text.getValue();
	            }
	        }
	 
	        // retrieve name from business model
	        String businessName = null;
	        Object bo = getBusinessObjectForPictogramElement(pictogramElement);
	        if (bo instanceof Container) {
	        	Container eClass = (Container) bo;
	            businessName = eClass.getName();
	        }
	 
	        // update needed, if names are different
	        boolean updateNameNeeded =
	            ((pictogramName == null && businessName != null) || 
	                (pictogramName != null && !pictogramName.equals(businessName)));
	        if (updateNameNeeded) {
	            return Reason.createTrueReason("Name is out of date");
	        } else {
	            return Reason.createFalseReason();
	        }
	}
	
	
	@Override
	public boolean canUpdate(IUpdateContext context) {
		// return true, if linked business object is a Data
        Object bo = getBusinessObjectForPictogramElement(context.getPictogramElement());
        return (bo instanceof Container);
	}
	
	@Override
	public boolean update(IUpdateContext context) {
		 // retrieve name from business model
        String businessName = null;
        PictogramElement pictogramElement = context.getPictogramElement();
        Object bo = getBusinessObjectForPictogramElement(pictogramElement);
        if (bo instanceof Container) {
        	Container eClass = (Container) bo;
            businessName = eClass.getName();
        }
 
        // Set name in pictogram model
        if (pictogramElement instanceof ContainerShape) {
            ContainerShape cs = (ContainerShape) pictogramElement;
            Shape shape = cs.getChildren().get(0); 
                if (shape != null && shape.getGraphicsAlgorithm() instanceof Text) {
                    Text text = (Text) shape.getGraphicsAlgorithm();
                    text.setValue(businessName);
                    return true;
                }
        }
 
        return false;
	}
	

	
	private String createNewName() {
		// TODO:
		String initialName = "NewSSContainer";
		String name = initialName+"1";
		int number = 1;
		while (findElement(name) != null) {
			number++;
			name = initialName + number;
		}
		return name;
	}
	private SourceSystemContainer findElement(String name) {
		EList<EObject> contents = getDiagram().eResource().getContents();
		for (EObject eObject : contents) {
			if (eObject instanceof SourceSystemContainer) {
				// TODO:
				if (name.equals(((SourceSystemContainer) eObject).getName())) {
					return (SourceSystemContainer) eObject;
				}
			}
		}
		return null;
	}	
	
	
}
